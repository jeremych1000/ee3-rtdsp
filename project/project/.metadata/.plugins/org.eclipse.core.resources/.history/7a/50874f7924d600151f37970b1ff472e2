/*************************************************************************************
			       DEPARTMENT OF ELECTRICAL AND ELECTRONIC ENGINEERING
					   		     IMPERIAL COLLEGE LONDON 

 				      EE 3.19: Real Time Digital Signal Processing
					       Dr Paul Mitcheson and Daniel Harvey

				        		  LAB 4: FIR Filters

 				            ********* I N T I O. C **********

  Demonstrates inputing and outputing data from the DSK's audio port using interrupts. 

 *************************************************************************************
 				Updated for use on 6713 DSK by Danny Harvey: May-Aug 2006
				Updated for CCS V4 Sept 10
 ************************************************************************************/
/*
 *	You should modify the code so that interrupts are used to service the 
 *  audio port.
 */
/**************************** Pre-processor statements ******************************/

#include <stdlib.h>
//  Included so program can make use of DSP/BIOS configuration tool.  
#include "dsp_bios_cfg.h"

/* The file dsk6713.h must be included in every program that uses the BSL.  This 
   example also includes dsk6713_aic23.h because it uses the 
   AIC23 codec module (audio interface). */
#include "dsk6713.h"
#include "dsk6713_aic23.h"

// math library (trig functions)
#include <math.h>

// Some functions to help with writing/reading the audio ports when using interrupts.
#include <helper_functions_ISR.h>

#include <../../../../MATLAB/fir_coef.txt>
#define N 209
#define mid_pt ((N-1)/2)
/******************************* Global declarations ********************************/

/* Audio port configuration settings: these values set registers in the AIC23 audio 
   interface to configure it. See TI doc SLWS106D 3-3 to 3-10 for more info. */
DSK6713_AIC23_Config Config = { \
			 /**********************************************************************/
			 /*   REGISTER	            FUNCTION			      SETTINGS         */ 
			 /**********************************************************************/\
    0x0017,  /* 0 LEFTINVOL  Left line input channel volume  0dB                   */\
    0x0017,  /* 1 RIGHTINVOL Right line input channel volume 0dB                   */\
    0x01f9,  /* 2 LEFTHPVOL  Left channel headphone volume   0dB                   */\
    0x01f9,  /* 3 RIGHTHPVOL Right channel headphone volume  0dB                   */\
    0x0011,  /* 4 ANAPATH    Analog audio path control       DAC on, Mic boost 20dB*/\
    0x0000,  /* 5 DIGPATH    Digital audio path control      All Filters off       */\
    0x0000,  /* 6 DPOWERDOWN Power down control              All Hardware on       */\
    0x0043,  /* 7 DIGIF      Digital audio interface format  16 bit                */\
    0x008d,  /* 8 SAMPLERATE Sample rate control             8 KHZ                 */\
    0x0001   /* 9 DIGACT     Digital interface activation    On                    */\
			 /**********************************************************************/
};


// Codec handle:- a variable used to identify audio interface  
DSK6713_AIC23_CodecHandle H_Codec;
// Pre-processor definitions

 /******************************* Function prototypes ********************************/
void init_hardware(void);     
void init_HWI(void);
/* The following MyFunk function is defined in the .tcf file to be the function that runs 
 * when the hardware interrupt is called.
 * 
 * The function does not have a return value or type. It calls supporting functions sinegen2.
 */
void MyFunk(void);
double non_cir_FIR(double sample_in);
double cir_FIR(double sample_in);
double linear_cir_FIR(double sample_in);
double sym_fir(double sample);
double x[N]={0};
double x_extended[2*N]={0};
int table[40]={0};

/********************************** Main routine ************************************/
void main(){      

 
	// initialize board and the audio port
  init_hardware();
  /* initialize hardware interrupts */
  init_HWI();
  	 		
  /* loop indefinitely, waiting for interrupts */  					
  while(1) 
  {};
  
}
        
/********************************** hardware() **********************************/  
void init_hardware()
{
    // Initialize the board support library, must be called first 
    DSK6713_init();
    
    // Start the AIC23 codec using the settings defined above in config 
    H_Codec = DSK6713_AIC23_openCodec(0, &Config);

	/* Function below sets the number of bits in word used by MSBSP (serial port) for 
	receives from AIC23 (audio port). We are using a 32 bit packet containing two 
	16 bit numbers hence 32BIT is set for  receive */
	MCBSP_FSETS(RCR1, RWDLEN1, 32BIT);	

	/* Configures interrupt to activate on each consecutive available 32 bits 
	from Audio port hence an interrupt is generated for each L & R sample pair */	
	MCBSP_FSETS(SPCR1, RINTM, FRM);

	/* These commands do the same thing as above but applied to data transfers to  
	the audio port */
	MCBSP_FSETS(XCR1, XWDLEN1, 32BIT);	
	MCBSP_FSETS(SPCR1, XINTM, FRM);	
	

}

/********************************** HWI() **************************************/  
/* Change IRQ_EVT_RINT1 to IRQ_EVT_XINT1 when transitioning from a recieve to transmit interrupt */
void init_HWI(void)
{
	IRQ_globalDisable();			// Globally disables interrupts
	IRQ_nmiEnable();				// Enables the NMI interrupt (used by the debugger)
	IRQ_map(IRQ_EVT_RINT1,4);		// Maps an event to a physical interrupt
	IRQ_enable(IRQ_EVT_RINT1);		// Enables the event
	IRQ_globalEnable();				// Globally enables interrupts

} 

/******************** WRITE YOUR INTERRUPT SERVICE ROUTINE HERE***********************/  
void MyFunk(void){
	double sum=0.0;
	double sample=0.0;
	sample=(double)mono_read_16Bit();
	//sum = non_cir_FIR(sample);
	//sum=cir_FIR(sample);
	//sum=linear_cir_FIR(sample);
	sum=sym_fir(sample);
	mono_write_16Bit((Int16)(sum*2));
}

double non_cir_FIR(double sample_in){
	int i, j;
	double sum=0;
	for (i=N-1; i>0; i--){
		x[i] = x[i-1];	
	}	
	x[0] = sample_in;
	
	for (j=0; j<N; j++){
		sum += b[j]*x[j];
	}
	return sum;
}
  
double cir_FIR(double sample_in){
	int j, read_index;
	double sum=0.0;
	static int write_index=N-1;
	x[write_index] = sample_in;
	for (j=0; j<N; j++){
		read_index=(write_index+j>N-1)?write_index+j-N:write_index+j;
		sum += b[j]*x[read_index];
	}
	write_index--;
	if(write_index==-1)write_index=N-1;
	return sum;
}

double linear_cir_FIR(double sample_in){
	int j, read_index,i,read_index2;
	double sum;
	static int write_index=N-1;
	i=N-1;
	x[write_index] = sample_in;
	read_index=((write_index+(N-1)/2)>N-1)?write_index+(N-1)/2-N:write_index+(N-1)/2;
	sum=b[(N-1)/2]*x[read_index];
	for (j=0; j<(N-1)/2; j++){
		read_index=(write_index+j>N-1)?write_index+j-N:write_index+j;
		read_index2=((read_index+i)>N-1)?read_index+i-N:read_index+i;
		sum += b[j]*(x[read_index]+x[read_index2]);
		i=i-2;
	}
	write_index--;
	if(write_index==-1)write_index=N-1;
	
	return sum;
}

double sym_fir(double sample){
	static int new_index=N-1;
    int old_index,iterator;
	double sum;
	old_index=new_index+N-1;
	x_extended[new_index]=sample;
	x_extended[new_index+N]=sample;

	sum=b[(N-1)/2]*x[new_index+(N-1)/2-1];
	for (iterator=0;iterator<(N-1)/2;iterator++){
		sum+=b[iterator]*(x_extended[new_index+iterator]+x_extended[old_index-iterator]);	
	}
	new_index--;
	if (new_index<0)
		new_index=N-1;
	return sum;
}
